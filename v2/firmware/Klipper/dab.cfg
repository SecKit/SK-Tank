[display_status]
[respond]

# Design: 
# - The latch fork should be in the zone ouside Y endstop is and outside Y-Max in the slicer
# - Enter the collision zone, where the latch fork is, only when needed. Leave immediately after probing task done.
# - During printing, the extruder carriage should not touch the collision zone. Set the Y-Max in slicer.

# Define a sequence of absolute and relative positions and make them into buttons, so if owners press the buttons 
# step by step and see the extruder moves smoothly, they can be confident that the extruder carriage won't collide
# during Z probing.


[gcode_macro _dabSettings]
variable_debug: False

variable_is_x_homed: False
variable_is_y_homed: False
variable_is_z_homed: False
variable_is_locked: True

variable_safe_z_coord_x: 30.0
variable_safe_z_coord_y: 330.0

variable_collision_zone_y: 8.0
variable_dist_push_latch: 11.5
variable_bed_drop_after_z_home: 15.0

variable_speed_movement: 450  # mm/s
variable_speed_lock_unlock: 60  # mm/s


# variable_probe_speed: 10.0

gcode:
    # SET_GCODE_VARIABLE MACRO=_dab_settings VARIABLE=debug VALUE={printer.heater_bed.target}



[homing_override]
axes: xyz
set_position_x:10
set_position_y:10
set_position_z:10
gcode:
    # {%  %}
    {% set is_x_homed = False %}
    {% set is_y_homed = False %}
    {% set is_z_homed = False %}

    {% if 'x' in printer.toolhead.homed_axes %}
        {% set is_x_homed = True %}
    {% endif %}

    {% if 'y' in printer.toolhead.homed_axes %}
        {% set is_y_homed = True %}
    {% endif %}

    {% if 'z' in printer.toolhead.homed_axes %}
        {% set is_z_homed = True %}
    {% endif %}

    _dabDebug MSG="homed: "{is_x_homed}", "{is_y_homed}", "{is_z_homed}

    {% set step_back_y = printer["gcode_macro _dabSettings"].collision_zone_y * -2.0 %}
    {% set bed_drop_after_z_home = printer["gcode_macro _dabSettings"].bed_drop_after_z_home %}
    {% set speed_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
    {% set spd_lock_unlock = printer["gcode_macro _dabSettings"].speed_lock_unlock * 100 %}


    G91
    G1 Y{step_back_y} Z{bed_drop_after_z_home} F{speed_movement}
    # a separated X movement from the above Y movement to prevent collision to the fork
    G1 X10 F{spd_lock_unlock}
    G90
    G28 X Y

    # DabUnlock
    # G28 Z
    # _dabLowerBed
    # DabLock

    _dabUpdateHomedStatus


[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    _dabDebug MSG="dab's PROBE_ACCURACY"

    # TODO: make sure the nozzle is inside the bed
    {% set speed_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}

    DabUnlock
    G90
    G1 X30 Y330 F{speed_movement}
    _PROBE_ACCURACY
    _dabLowerBed
    DabLock


[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    _dabDebug MSG="dab's PROBE_CALIBRATE"

    # TODO: make sure the nozzle is inside the bed
    {% set speed_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}

    DabUnlock
    G0 X150 Y150 F{speed_movement}
    _PROBE_CALIBRATE    # don't lock yet, still testing Z offset
    { action_respond_info("Remember to click the DabLock macro button after calibration cancelled or done.") }


[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    _dabDebug MSG="dab's Z_TILT_ADJUST"

    DabUnlock
    _Z_TILT_ADJUST
    _dabLowerBed
    DabLock





[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    _dabDebug MSG="dab's BED_MESH_CALIBRATE"

    DabUnlock
    _BED_MESH_CALIBRATE
    _dabLowerBed
    DabLock



[gcode_macro DabUnlock]
description: Unlock the latch of DAB
gcode:
    # if XY not homed
    # {% if not printer["gcode_macro _dabSettings"].is_x_homed or not printer["gcode_macro _dabSettings"].is_y_homed %}
    #     { action_respond_info("Home XY first") }   # show error msg and return
    # {% else %}

        {% set y_endstop_coord_x = printer["configfile"].config.stepper_x.position_endstop %}
        {% set y_endstop_coord_y = printer["configfile"].config.stepper_y.position_endstop %}
        # _dabDebug MSG="Y endstop: "{y_endstop_coord_x|string}", "{y_endstop_coord_y|string}
        
        {% set safe_z_coord_x = printer["gcode_macro _dabSettings"].safe_z_coord_x %}
        {% set safe_z_coord_y = printer["gcode_macro _dabSettings"].safe_z_coord_y %}

        {% set collision_zone_y = printer["gcode_macro _dabSettings"].collision_zone_y %}
        {% set dist_push_latch = printer["gcode_macro _dabSettings"].dist_push_latch %}

        {% set spd_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
        {% set spd_lock_unlock = printer["gcode_macro _dabSettings"].speed_lock_unlock * 60 %}

        # move to the unlock preparation position
        G0 X{y_endstop_coord_x|float + 21.0} Y{y_endstop_coord_y|float} F{spd_movement}

        G91 # relative position       
        G0 Y{collision_zone_y} F{spd_movement}    # move into collision zone
        G0 X{dist_push_latch} F{spd_lock_unlock}     # unlock at the predefined speed and acc
        G0 Y{collision_zone_y|float * -1.0 - 3.0} F{spd_movement}   # move out collision zone

        G90 # absolute position
        G0 X{safe_z_coord_x} Y{safe_z_coord_y} F{spd_movement}
        
    # {% endif %}

[gcode_macro DabLock]
description: Lock the latch of DAB
gcode:
    # # if XY not homed
    # {% if printer["gcode_macro _dabSettings"].is_x_homed or printer["gcode_macro _dabSettings"].is_y_homed %}
    #     { action_respond_info("Home XY first") }   # show error msg and return
    # {% else %}
        {% set y_endstop_coord_x = printer["configfile"].config.stepper_x.position_endstop %}
        {% set y_endstop_coord_y = printer["configfile"].config.stepper_y.position_endstop %}
        # _dabDebug MSG="Y endstop: "{y_endstop_coord_x|string}", "{y_endstop_coord_y|string}
        
        {% set safe_z_coord_x = printer["gcode_macro _dabSettings"].safe_z_coord_x %}
        {% set safe_z_coord_y = printer["gcode_macro _dabSettings"].safe_z_coord_y %}

        {% set collision_zone_y = printer["gcode_macro _dabSettings"].collision_zone_y %}
        {% set dist_push_latch = printer["gcode_macro _dabSettings"].dist_push_latch %}

        {% set spd_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
        {% set spd_lock_unlock = printer["gcode_macro _dabSettings"].speed_lock_unlock * 60 %}

        # move to the lock preparation position
        G0 X{y_endstop_coord_x|float + 50.0} Y{y_endstop_coord_y|float} F{spd_movement}

        G91 # relative position       
        G0 Y{collision_zone_y} F{spd_movement}    # move into collision zone
        G0 X{dist_push_latch|float * -1.0} F{spd_lock_unlock}     # unlock at the predefined speed and acc
        G0 Y{collision_zone_y|float * -1.0 - 3.0} F{spd_movement}   # move out collision zone
       
        G90 # absolute position
        # G0 X{safe_z_coord_x} Y{safe_z_coord_y} F{spd_movement}
        
    # {% endif %}



[gcode_macro _dabUpdateHomedStatus]
gcode:
    _dabDebug MSG="_dabUpdateHomedStatus"

    {% if 'x' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_x_homed VALUE={True}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_x_homed VALUE={False}
    {% endif %}

    {% if 'y' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_y_homed VALUE={True}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_y_homed VALUE={False}
    {% endif %}

    {% if 'z' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_z_homed VALUE={True}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_z_homed VALUE={False}
    {% endif %}


[gcode_macro _dabLowerBed]
gcode:
    G91
    G0 Z{printer["gcode_macro _dabSettings"].bed_drop_after_z_home} F6000
    G90

[gcode_macro _dabDebug]
gcode:
    {% if printer["gcode_macro _dabSettings"].debug %}
        {% set msg = params.MSG %}
        { action_respond_info(msg) }
    {% endif %}


