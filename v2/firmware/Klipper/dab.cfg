# Design: 
# - The latch fork should be in the zone ouside Y endstop and outside Y-Max in the slicer
# - Enter the collision zone, where the latch fork is, only when needed. Leave immediately after probing task done.
# - During printing, the extruder carriage should not touch the collision zone. Set the Y-Max in slicer.
#
# DAB tuning:
# - Uncomment the [homing_override] section after position_endstop, position_min, position_max are tuned.
# - Use the printed tuning fork while fine tuning.
# - Adjust the variables in the "Fine-tuning" section.

[display_status]
[respond]


[gcode_macro _dabSettings]
variable_debug: False

variable_is_x_homed: False
variable_is_y_homed: False
variable_is_z_homed: False
variable_is_locked: True

# == Fine-tuning start =========================================================
# You must fine-tune and check these parameters for the latch to work properly
#-------------------------------------------------------------------------------
# A preparation coord before unlocking and locking
variable_coord_x_prep_unlock: 14.0        # eg. (X_min + 19)
variable_coord_x_prep_lock: 42.0          # eg. (X_min + 48)
variable_coord_y_prep: 403.0              # eg. (Y_Max - 10)

variable_speed_movement: 35               # eg. 450mm/s. Set to a obeservable low speed, eg. 35mm/s, while tuning.
variable_speed_lock_unlock: 35            # eg. 60mm/s. Set to a obeservable low speed, eg. 35mm/s, while tuning.

# A coord inside the bed for Z probing
variable_coord_x_safe_z_probe: 50.0       # Usually (X_min + 50)
variable_coord_y_safe_z_probe: 350.0      # Usually (Y_Max - 50)

# == Fine-tuning end ==========================================================


variable_dist_y_collision_zone: 8.0
variable_dist_x_move_latch: 11.5

variable_bed_drop_after_z_home: 15.0


gcode:
    # SET_GCODE_VARIABLE MACRO=_dab_settings VARIABLE=debug VALUE={printer.heater_bed.target}

# # == homing_override start =====================================================
# # Uncomment [homing_override] after you have tuned position_endstop, 
# # position_min, position_max in [stepper_x] and [stepper_y]
# # ==============================================================================
# [homing_override]
# axes: xyz
# set_position_x:10   # explicitly set a coord even before homing
# set_position_y:10   # explicitly set a coord even before homing
# set_position_z:10   # explicitly set a coord even before homing
# gcode:
#     {% set is_x_homed = False %}
#     {% set is_y_homed = False %}
#     {% set is_z_homed = False %}

#     {% if 'x' in printer.toolhead.homed_axes %}
#         {% set is_x_homed = True %}
#     {% endif %}

#     {% if 'y' in printer.toolhead.homed_axes %}
#         {% set is_y_homed = True %}
#     {% endif %}

#     {% if 'z' in printer.toolhead.homed_axes %}
#         {% set is_z_homed = True %}
#     {% endif %}

#     _dabDebug MSG="homed: "{is_x_homed}", "{is_y_homed}", "{is_z_homed}

#     {% set step_back_y = printer["gcode_macro _dabSettings"].dist_y_collision_zone * -2.0 %}
#     {% set bed_drop_after_z_home = printer["gcode_macro _dabSettings"].bed_drop_after_z_home %}
#     {% set speed_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
#     {% set spd_lock_unlock = printer["gcode_macro _dabSettings"].speed_lock_unlock * 100 %}


#     G91
#     G1 Y{step_back_y} Z{bed_drop_after_z_home} F{speed_movement}
#     # a separated X movement from the above Y movement to prevent collision to the fork
#     G1 X10 F{spd_lock_unlock}
#     G90
#     G28 X Y

#     DabUnlock
#     G28 Z
#     _dabLowerBed
#     DabLock

#     _dabUpdateHomedStatus

# # == homing_override end =====================================================


[gcode_macro PROBE_ACCURACY]
rename_existing: _PROBE_ACCURACY
gcode:
    _dabDebug MSG="dab's PROBE_ACCURACY"

    {% set speed_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
    {% set coord_x_safe_z_probe = printer["gcode_macro _dabSettings"].coord_x_safe_z_probe %}
    {% set coord_y_safe_z_probe = printer["gcode_macro _dabSettings"].coord_y_safe_z_probe %}

    DabUnlock
    G90
    G1 X{coord_x_safe_z_probe} Y{coord_y_safe_z_probe} F{speed_movement}
    _PROBE_ACCURACY
    _dabLowerBed
    DabLock


[gcode_macro PROBE_CALIBRATE]
rename_existing: _PROBE_CALIBRATE
gcode:
    _dabDebug MSG="dab's PROBE_CALIBRATE"

    {% set speed_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
    {% set coord_x_safe_z_probe = printer["gcode_macro _dabSettings"].coord_x_safe_z_probe %}
    {% set coord_y_safe_z_probe = printer["gcode_macro _dabSettings"].coord_y_safe_z_probe %}

    DabUnlock
    G1 X{coord_x_safe_z_probe} Y{coord_y_safe_z_probe} F{speed_movement}
    _PROBE_CALIBRATE    # don't lock yet, still testing Z offset
    { action_respond_info("Remember to click the DabLock macro button after calibration cancelled or done.") }


[gcode_macro Z_TILT_ADJUST]
rename_existing: _Z_TILT_ADJUST
gcode:
    _dabDebug MSG="dab's Z_TILT_ADJUST"

    DabUnlock
    _Z_TILT_ADJUST
    _dabLowerBed
    DabLock





[gcode_macro BED_MESH_CALIBRATE]
rename_existing: _BED_MESH_CALIBRATE
gcode:
    _dabDebug MSG="dab's BED_MESH_CALIBRATE"

    DabUnlock
    _BED_MESH_CALIBRATE
    _dabLowerBed
    DabLock



[gcode_macro DabUnlock]
description: Unlock the latch of DAB
gcode:
    # if XY not homed
    # {% if not printer["gcode_macro _dabSettings"].is_x_homed or not printer["gcode_macro _dabSettings"].is_y_homed %}
    #     { action_respond_info("Home XY first") }   # show error msg and return
    # {% else %}

        {% set coord_x_prep_unlock = printer["gcode_macro _dabSettings"].coord_x_prep_unlock %}
        {% set coord_y_prep = printer["gcode_macro _dabSettings"].coord_y_prep %}
        # _dabDebug MSG="Unlocking prep coord: "{coord_x_prep_unlock|string}", "{coord_y_prep|string}
        
        {% set dist_y_collision_zone = printer["gcode_macro _dabSettings"].dist_y_collision_zone %}
        {% set dist_x_move_latch = printer["gcode_macro _dabSettings"].dist_x_move_latch %}

        {% set coord_x_safe_z_probe = printer["gcode_macro _dabSettings"].coord_x_safe_z_probe %}
        {% set coord_y_safe_z_probe = printer["gcode_macro _dabSettings"].coord_y_safe_z_probe %}

        {% set spd_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
        {% set spd_lock_unlock = printer["gcode_macro _dabSettings"].speed_lock_unlock * 60 %}

        # move to the unlocking preparation position
        G0 X{coord_x_prep_unlock|float} Y{coord_y_prep|float} F{spd_movement}

        G91 # relative position       
        G0 Y{dist_y_collision_zone} F{spd_movement}    # move into collision zone
        G0 X{dist_x_move_latch} F{spd_lock_unlock}     # unlock at the predefined speed and acc
        G0 Y{dist_y_collision_zone|float * -1.0 - 3.0} F{spd_movement}   # move out collision zone

        G90 # absolute position
        G0 X{coord_x_safe_z_probe} Y{coord_y_safe_z_probe} F{spd_movement}
        
    # {% endif %}

[gcode_macro DabLock]
description: Lock the latch of DAB
gcode:
    # # if XY not homed
    # {% if printer["gcode_macro _dabSettings"].is_x_homed or printer["gcode_macro _dabSettings"].is_y_homed %}
    #     { action_respond_info("Home XY first") }   # show error msg and return
    # {% else %}
        {% set coord_x_prep_lock = printer["gcode_macro _dabSettings"].coord_x_prep_lock %}
        {% set coord_y_prep = printer["gcode_macro _dabSettings"].coord_y_prep %}
        # _dabDebug MSG="Locking prep coord: "{coord_x_prep_lock|string}", "{coord_y_prep|string}

        {% set dist_y_collision_zone = printer["gcode_macro _dabSettings"].dist_y_collision_zone %}
        {% set dist_x_move_latch = printer["gcode_macro _dabSettings"].dist_x_move_latch %}

        {% set coord_x_safe_z_probe = printer["gcode_macro _dabSettings"].coord_x_safe_z_probe %}
        {% set coord_y_safe_z_probe = printer["gcode_macro _dabSettings"].coord_y_safe_z_probe %}

        {% set spd_movement = printer["gcode_macro _dabSettings"].speed_movement * 60 %}
        {% set spd_lock_unlock = printer["gcode_macro _dabSettings"].speed_lock_unlock * 60 %}

        # move to the locking preparation position
        G0 X{coord_x_prep_lock|float} Y{coord_y_prep|float} F{spd_movement}

        G91 # relative position       
        G0 Y{dist_y_collision_zone} F{spd_movement}    # move into collision zone
        G0 X{dist_x_move_latch|float * -1.0} F{spd_lock_unlock}     # unlock at the predefined speed and acc
        G0 Y{dist_y_collision_zone|float * -1.0 - 3.0} F{spd_movement}   # move out collision zone
       
        G90 # absolute position
        # G0 X{coord_x_safe_z_probe} Y{coord_y_safe_z_probe} F{spd_movement}
        
    # {% endif %}



[gcode_macro _dabUpdateHomedStatus]
gcode:
    _dabDebug MSG="_dabUpdateHomedStatus"

    {% if 'x' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_x_homed VALUE={True}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_x_homed VALUE={False}
    {% endif %}

    {% if 'y' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_y_homed VALUE={True}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_y_homed VALUE={False}
    {% endif %}

    {% if 'z' in printer.toolhead.homed_axes %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_z_homed VALUE={True}
    {% else %}
        SET_GCODE_VARIABLE MACRO=_dabSettings VARIABLE=is_z_homed VALUE={False}
    {% endif %}


[gcode_macro _dabLowerBed]
gcode:
    G91
    G0 Z{printer["gcode_macro _dabSettings"].bed_drop_after_z_home} F6000
    G90

[gcode_macro _dabDebug]
gcode:
    {% if printer["gcode_macro _dabSettings"].debug %}
        {% set msg = params.MSG %}
        { action_respond_info(msg) }
    {% endif %}


